# if
if 1 > 0:
    """ для заполнения нерализованной части используют pass, Ellipsis (...), либо строки """
    pass
    # либо
    ...
    # либо
    "do something"


# and, or, not, ==/!=, >/>=/</<=
if 0 == 0 or 1 != 0:
    ...
if 0 > 1 and not (...):
    ...


# else and elif
if (...):
    """ если условие истинно выполнится эта часть """
elif (...):
    """ если истинно другое условие выполнится эта часть """
else:
    """ если не выолнено ни одно из условий то эта часть """

""" elif можно использовать любое количесво раз """
if ...:
    ...
elif ...:
    ...
elif ...:
    ...
else:
    ...

"""
    синтаксис, аналогичный по смыслу switch...case в других языках можно сделать через словарь вместо if...elif...else
"""
conditions = {
    1: 1,
    2: 2
}
value = conditions.get((...), 'default')


# a if a else b
""" тернарный оператор: вернуть то что слева (1) если условие истинно иначе то что справа (0) """
a = 1 if ... else 0
""" Поскольку """
False == 0
True == 1
""" можно сделать и так, но не делайте так """
""" False -> 0, ['no', 'yes'][0] -> 'no', значит ['no', 'yes'][(bool)] обратно зависит от bool """
a = ['no', 'yes'][False]
""" 1 - False -> 1, ['yes','no'][1] -> 'no', значит ['yes', 'no'][1 - (bool)] прямо зависит от bool """
a = ['yes', 'no'][1 - False]


# is
""" is проверяет равенство двух объектов """
a = 1
b = 1
""" здесь a и b ссылаются на два разных объекта в памяти """
a is b == False

a = None
b = None
""" None всегда один и тот же None object """
a is b == True

a = b = []
""" при таком присвоении a и b ссылаются на один и тот же объект """
a is b == True
